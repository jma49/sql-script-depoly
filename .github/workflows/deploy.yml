# .github/workflows/deploy.yml
name: Deploy Next.js App to Production

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '20.19.3'
  APP_NAME: 'next-app'
  HEALTH_CHECK_URL: 'http://localhost:3000'
  HEALTH_CHECK_TIMEOUT: 60

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          command_timeout: 15m
          
          script: |
            set -e  # 遇到错误立即退出
            
            echo "🚀 开始零停机部署..."
            
            # 颜色定义
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            NC='\033[0m' # No Color
            
            # 日志函数
            log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
            log_success() { echo -e "${GREEN}✅ $1${NC}"; }
            log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
            log_error() { echo -e "${RED}❌ $1${NC}"; }
            
            # 进入项目目录
            cd /root/sql-script-depoly || { log_error "项目目录不存在"; exit 1; }
            
            # 1. 部署前检查
            log_info "执行部署前检查..."
            
            # 检查系统资源
            FREE_MEM=$(free -m | awk 'NR==2{printf "%.1f", $7*100/$2}')
            DISK_USAGE=$(df -h . | awk 'NR==2{print $5}' | sed 's/%//')
            
            log_info "可用内存: ${FREE_MEM}%"
            log_info "磁盘使用: ${DISK_USAGE}%"
            
            if (( $(echo "$FREE_MEM < 10" | bc -l) )); then
              log_error "可用内存不足 (${FREE_MEM}%)，取消部署"
              exit 1
            fi
            
            if [ "$DISK_USAGE" -gt 90 ]; then
              log_error "磁盘空间不足 (${DISK_USAGE}%)，取消部署"
              exit 1
            fi
            
            # 备份当前版本信息
            CURRENT_COMMIT=$(git rev-parse HEAD)
            BACKUP_DIR="/tmp/deploy-backup-$(date +%Y%m%d-%H%M%S)"
            
            log_info "当前版本: ${CURRENT_COMMIT:0:8}"
            log_info "创建备份点: $BACKUP_DIR"
            
            # 2. 拉取新代码
            log_info "拉取最新代码..."
            if ! git pull origin main; then
              log_error "Git pull 失败"
              exit 1
            fi
            
            NEW_COMMIT=$(git rev-parse HEAD)
            log_info "新版本: ${NEW_COMMIT:0:8}"
            
            # 检查是否有实际更新
            if [ "$CURRENT_COMMIT" = "$NEW_COMMIT" ]; then
              log_warning "没有新的提交，跳过部署"
              exit 0
            fi
            
            # 3. 设置 Node.js 环境
            log_info "设置 Node.js 环境..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # 确保使用正确的 Node.js 版本
            if ! nvm use ${{ env.NODE_VERSION }}; then
              log_warning "Node.js ${{ env.NODE_VERSION }} 未安装，正在安装..."
              nvm install ${{ env.NODE_VERSION }}
              nvm use ${{ env.NODE_VERSION }}
            fi
            
            log_success "Node.js 版本: $(node --version)"
            log_success "NPM 版本: $(npm --version)"
            
            # 4. 安装依赖
            log_info "安装依赖..."
            if ! npm ci --production=false; then
              log_error "依赖安装失败"
              exit 1
            fi
            
            # 5. 构建新版本（降低优先级以减少对当前服务的影响）
            log_info "构建新版本（低优先级模式）..."
            if ! nice -n 10 npm run build; then
              log_error "构建失败，回滚到上一版本"
              git reset --hard $CURRENT_COMMIT
              exit 1
            fi
            
            log_success "构建完成"
            
            # 6. PM2 零停机部署
            log_info "开始零停机重载..."
            
            # 确保 PM2 已安装
            if ! command -v pm2 &> /dev/null; then
              log_warning "PM2 未安装，正在全局安装..."
              npm install -g pm2
            fi
            
                         # 检查应用是否存在
             if pm2 describe ${{ env.APP_NAME }} > /dev/null 2>&1; then
               log_info "执行零停机重载..."
               
               # 使用 ecosystem.config.js 进行零停机重载
               if ! pm2 reload ecosystem.config.js --env production; then
                 log_error "PM2 重载失败，尝试回滚..."
                 git reset --hard $CURRENT_COMMIT
                 npm ci --production=false
                 npm run build
                 pm2 reload ecosystem.config.js --env production
                 exit 1
               fi
             else
               log_info "首次部署，启动应用..."
               # 使用 ecosystem 配置启动应用
               pm2 start ecosystem.config.js --env production
             fi
            
            # 保存 PM2 配置
            pm2 save
            
            # 7. 健康检查
            log_info "执行健康检查..."
            
            # 等待应用完全启动
            sleep 15
            
            # 多轮健康检查
            HEALTH_CHECKS=0
            MAX_HEALTH_CHECKS=6
            HEALTH_CHECK_INTERVAL=10
            
            while [ $HEALTH_CHECKS -lt $MAX_HEALTH_CHECKS ]; do
              if curl -f --connect-timeout 10 --max-time 30 ${{ env.HEALTH_CHECK_URL }} > /dev/null 2>&1; then
                log_success "健康检查通过 (第 $((HEALTH_CHECKS + 1)) 次)"
                break
              else
                HEALTH_CHECKS=$((HEALTH_CHECKS + 1))
                if [ $HEALTH_CHECKS -eq $MAX_HEALTH_CHECKS ]; then
                  log_error "健康检查失败，执行自动回滚..."
                  
                  # 自动回滚
                  git reset --hard $CURRENT_COMMIT
                  npm ci --production=false
                  npm run build
                  pm2 reload ${{ env.APP_NAME }} --update-env
                  
                  log_error "已回滚到上一版本: ${CURRENT_COMMIT:0:8}"
                  exit 1
                else
                  log_warning "健康检查失败 (第 $HEALTH_CHECKS 次)，${HEALTH_CHECK_INTERVAL}秒后重试..."
                  sleep $HEALTH_CHECK_INTERVAL
                fi
              fi
            done
            
            # 8. 验证 PM2 状态
            if pm2 describe ${{ env.APP_NAME }} | grep -q "online"; then
              INSTANCE_COUNT=$(pm2 describe ${{ env.APP_NAME }} | grep -c "online")
              log_success "应用运行正常，活跃实例: $INSTANCE_COUNT"
            else
              log_error "PM2 状态异常"
              pm2 logs ${{ env.APP_NAME }} --lines 20
              exit 1
            fi
            
            # 9. 清理旧的构建缓存（释放磁盘空间）
            log_info "清理构建缓存..."
            npm run clean:cache 2>/dev/null || true
            
            # 清理旧的 PM2 日志
            pm2 flush
            
            log_success "🎉 零停机部署完成！"
            log_info "版本更新: ${CURRENT_COMMIT:0:8} → ${NEW_COMMIT:0:8}"
            log_info "部署时间: $(date '+%Y-%m-%d %H:%M:%S')"